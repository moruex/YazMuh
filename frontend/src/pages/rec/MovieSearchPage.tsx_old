import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useSearchParams } from 'react-router-dom';
import './MovieSearchPage.css';
import Footer from '@components/app/Footer';
import { MovieCard2 } from './MovieCard2';
import { 
    Movie as ApiMovie,
    Genre as ApiGenre,
    getAllGenres,
    getMoviesForPage,
    getMoviesPageCount,
    MoviesPageParams 
} from '@src/services/movieNewsService';
import { Filter, Search, ListFilter } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import CircularLoader from '@components/app/CircularLoader';

export interface Movie {
  id: string;
  title: string;
  year?: number;
  posterUrl?: string | null;
  rating?: number | null;
  genres?: { id: string; name: string }[] | null;
  director?: string;
  runtime?: number;
  language?: string;
}

const sortMap: { [key: string]: string } = {
  title_asc: "TITLE_ASC",
  title_desc: "TITLE_DESC",
  year_desc: "RELEASE_DATE_DESC",
  year_asc: "RELEASE_DATE_ASC",
  rating_desc: "VOTE_AVERAGE_DESC",
  rating_asc: "VOTE_AVERAGE_ASC",
};
export type SortByType = keyof typeof sortMap;

interface FilterOptions {
    query: string;
    genreIds: string[];
    yearFrom: string;
    yearTo: string;
    minRating: string;
    sortBy: SortByType;
}

interface MultiSelectProps {
    options: ApiGenre[];
    selectedValues: string[];
    onChange: (selectedIds: string[]) => void;
    placeholder: string;
}

const MultiSelect: React.FC<MultiSelectProps> = ({ options, selectedValues, onChange, placeholder }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');
    const dropdownRef = useRef<HTMLDivElement>(null);

    const toggleOption = (optionId: string) => {
        const newSelected = selectedValues.includes(optionId)
            ? selectedValues.filter(id => id !== optionId)
            : [...selectedValues, optionId];
        onChange(newSelected);
    };

    const filteredOptions = options.filter(option =>
        option.name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, [dropdownRef]);

    return (
        <div className="ms-multi-select-container" ref={dropdownRef}>
            <div
                className={`ms-multi-select-input ${isOpen ? 'active' : ''}`}
                onClick={() => setIsOpen(!isOpen)} >
                <span>{selectedValues.length > 0 ? `${selectedValues.length} genre${selectedValues.length > 1 ? 's' : ''} selected` : placeholder}</span>
                <ListFilter size={16} />
            </div>
            {isOpen && (
                <div className="ms-multi-select-dropdown">
                    <div className="ms-multi-select-search" onClick={e => e.stopPropagation()}>
                        <input
                            type="text"
                            placeholder="Search genres..."
                            value={searchQuery}
                            onChange={e => setSearchQuery(e.target.value)}
                            className='ms-search-input1' />
                    </div>
                    {filteredOptions.map(option => (
                        <div
                            key={option.id}
                            className="ms-multi-select-option"
                            onClick={(e) => {
                                e.stopPropagation();
                                toggleOption(option.id);
                            }} >
                            <input
                                className='ms-multi-select-checkbox'
                                type="checkbox"
                                checked={selectedValues.includes(option.id)}
                                readOnly
                            />
                            {option.name}
                        </div>
                    ))}
                    {filteredOptions.length === 0 && <div className="ms-no-options">No genres found.</div>}
                </div>
            )}
        </div>
    );
};

const MovieSearchPage = () => {
    const [searchParams, setSearchParams] = useSearchParams();
    const queryInputRef = useRef<HTMLInputElement>(null);
    const { t } = useTranslation();

    const initializeFilters = useCallback((): FilterOptions => {
        const query = searchParams.get('query') || '';
        const genreIds = searchParams.getAll('genreId') || [];
        const yearFrom = searchParams.get('yearFrom') || '';
        const yearTo = searchParams.get('yearTo') || '';
        const minRating = searchParams.get('minRating') || 'Any';
        const sortByParam = searchParams.get('sortBy') || 'title_asc';
        const sortBy = Object.keys(sortMap).includes(sortByParam) ? sortByParam as SortByType : 'title_asc';
        return { query, genreIds, yearFrom, yearTo, minRating, sortBy };
    }, [searchParams]);

    const [filters, setFilters] = useState<FilterOptions>(initializeFilters);
    const [inputValue, setInputValue] = useState<string>(filters.query);
    const [movies, setMovies] = useState<Movie[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [advancedSearchOpen, setAdvancedSearchOpen] = useState<boolean>(false);
    const [availableGenres, setAvailableGenres] = useState<ApiGenre[]>([]);
    const [totalMovies, setTotalMovies] = useState(0);
    const [currentPage, setCurrentPage] = useState(1);
    const moviesPerPage = 15;

    const ratingOptions = ['Any', '9+', '8+', '7+', '6+', '5+'];
    const sortOptionsDisplay: { value: SortByType; label: string }[] = [
        { value: 'title_asc', label: 'Title (A-Z)' },
        { value: 'title_desc', label: 'Title (Z-A)' },
        { value: 'year_desc', label: 'Newest First' },
        { value: 'year_asc', label: 'Oldest First' },
        { value: 'rating_desc', label: 'Rating (High-Low)' },
        { value: 'rating_asc', label: 'Rating (Low-High)' },
    ];

    useEffect(() => {
      getAllGenres()
        .then(data => setAvailableGenres(data || []))
        .catch(err => {
          console.error("Failed to fetch genres:", err);
          setError("Failed to load genre filters.");
        });
    }, []);
    
    const fetchAndFilterMovies = useCallback(async () => {
        setLoading(true);
        setError(null);

        const apiParams: MoviesPageParams = {
            limit: moviesPerPage,
            offset: (currentPage - 1) * moviesPerPage,
            sortBy: sortMap[filters.sortBy],
            search: filters.query.trim() || undefined,
            filter: {},
        };

        if (filters.genreIds.length > 0) apiParams.filter.genreIds = filters.genreIds;
        if (filters.yearFrom) {
            const yearNum = parseInt(filters.yearFrom, 10);
            if (!isNaN(yearNum)) apiParams.filter.minReleaseYear = yearNum;
        }
        if (filters.yearTo) {
            const yearNum = parseInt(filters.yearTo, 10);
            if (!isNaN(yearNum)) apiParams.filter.maxReleaseYear = yearNum;
        }
        if (filters.minRating && filters.minRating !== 'Any') {
            const ratingNum = parseFloat(filters.minRating.replace('+', ''));
            if (!isNaN(ratingNum)) apiParams.filter.minMovieqRating = ratingNum;
        }
        if (Object.keys(apiParams.filter).length === 0) delete apiParams.filter;

        try {
            const count = await getMoviesPageCount({ filter: apiParams.filter, search: apiParams.search });
            setTotalMovies(count);
            if (count === 0) {
                setMovies([]);
            } else {
                const moviesData = await getMoviesForPage(apiParams);
                const transformedMovies: Movie[] = moviesData.map((apiMovie: ApiMovie) => ({
                    id: String(apiMovie.id),
                    title: apiMovie.title,
                    posterUrl: apiMovie.poster_url,
                    year: apiMovie.release_date ? new Date(apiMovie.release_date).getFullYear() : undefined,
                    rating: apiMovie.movieq_rating ?? apiMovie.imdb_rating,
                    genres: apiMovie.genres,
                }));
                setMovies(transformedMovies);
            }
        } catch (err: any) {
            console.error("Error fetching movies:", err);
            setError(err.message || "Failed to fetch movies. Please try again.");
            setMovies([]);
            setTotalMovies(0);
        }
        setLoading(false);
    }, [filters, currentPage]);

    useEffect(() => {
        fetchAndFilterMovies();
    }, [fetchAndFilterMovies]);

    useEffect(() => {
        const newSearchParams = new URLSearchParams();
        if (filters.query) newSearchParams.set('query', filters.query);
        filters.genreIds.forEach(id => newSearchParams.append('genreId', id));
        if (filters.yearFrom) newSearchParams.set('yearFrom', filters.yearFrom);
        if (filters.yearTo) newSearchParams.set('yearTo', filters.yearTo);
        if (filters.minRating && filters.minRating !== 'Any') newSearchParams.set('minRating', filters.minRating);
        if (filters.sortBy && filters.sortBy !== 'title_asc') newSearchParams.set('sortBy', filters.sortBy as string);
        setSearchParams(newSearchParams, { replace: true });
    }, [filters, setSearchParams]);

    useEffect(() => {
        const currentUrlFilters = initializeFilters();
        if (JSON.stringify(currentUrlFilters) !== JSON.stringify(filters)) {
            setFilters(currentUrlFilters);
            setCurrentPage(1); 
        }
        const queryFromUrl = searchParams.get('query') || '';
        if (queryFromUrl !== inputValue && document.activeElement !== queryInputRef.current) {
            setInputValue(queryFromUrl);
        }
    }, [searchParams]);

    const handleQueryInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue(e.target.value);
    };

    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFilters(prev => ({
            ...prev,
            [name]: value,
        }));
        setCurrentPage(1); 
    };

    const handleSortByChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setFilters(prev => ({
            ...prev,
            sortBy: e.target.value as SortByType,
        }));
        setCurrentPage(1);
    };

    const handleGenresChange = (selectedIds: string[]) => {
        setFilters(prev => ({ ...prev, genreIds: selectedIds }));
        setCurrentPage(1);
    };

    const triggerSearch = () => {
        setFilters(prev => ({ ...prev, query: inputValue.trim() }));
        setCurrentPage(1);
        queryInputRef.current?.blur();
        fetchAndFilterMovies();
    };

    const handleSearchSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        triggerSearch();
    };

    const toggleAdvancedSearch = () => setAdvancedSearchOpen(prev => !prev);

    const handlePageChange = (page: number) => {
        setCurrentPage(page);
    };

    const resetFiltersAndSearch = () => {
        setFilters({
            query: '',
            genreIds: [],
            yearFrom: '',
            yearTo: '',
            minRating: 'Any',
            sortBy: 'title_asc',
        });
        setInputValue('');
        setCurrentPage(1);
        setSearchParams({}, { replace: true });
    };

    const Pagination = () => {
        const totalPages = Math.ceil(totalMovies / moviesPerPage);
        if (totalPages <= 1) return null;

        const pages = [];
        for (let i = 1; i <= totalPages; i++) {
            pages.push(
                <button
                    key={i}
                    onClick={() => handlePageChange(i)}
                    className={`pagination-button ${currentPage === i ? 'active' : ''}`}
                >
                    {i}
                </button>
            );
        }
        return (
            <div className="pagination">
                {pages}
            </div>
        );
    };

    return (
        <div className="movie-search-page">
            <div className="ms-search-container">
                <form onSubmit={handleSearchSubmit} className="ms-search-bar">
                    <input
                        type="text"
                        placeholder={t('search-page.search-placeholder')}
                        className="ms-search-input"
                        value={inputValue}
                        onChange={handleQueryInputChange}
                        ref={queryInputRef}
                    />
                    <button type="submit" className="ms-search-button">
                        <Search size={20} />
                    </button>
                </form>
                <button onClick={toggleAdvancedSearch} className="ms-advanced-search-toggle">
                    <Filter size={20} />
                    <span>{t('search-page.advanced-search-toggle')}</span>
                </button>
            </div>

            {advancedSearchOpen && (
                <div className="ms-advanced-search-options">
                    <div className="ms-filter-group">
                        <label htmlFor="yearFrom">{t('search-page.year-from')}:</label>
                        <input
                            type="number"
                            id="yearFrom"
                            name="yearFrom"
                            value={filters.yearFrom}
                            onChange={handleFilterChange}
                            className='ms-filter-input'
                        />
                    </div>
                    <div className="ms-filter-group">
                        <label htmlFor="yearTo">{t('search-page.year-to')}:</label>
                        <input
                            type="number"
                            id="yearTo"
                            name="yearTo"
                            value={filters.yearTo}
                            onChange={handleFilterChange}
                            className='ms-filter-input'
                        />
                    </div>
                    <div className="ms-filter-group">
                        <label htmlFor="minRating">{t('search-page.min-rating')}:</label>
                        <select
                            id="minRating"
                            name="minRating"
                            value={filters.minRating}
                            onChange={handleFilterChange}
                            className='ms-filter-select'
                        >
                            {ratingOptions.map(option => (
                                <option key={option} value={option}>{option}</option>
                            ))}
                        </select>
                    </div>
                    <div className="ms-filter-group">
                        <label htmlFor="sortBy">{t('search-page.sort-by')}:</label>
                        <select
                            id="sortBy"
                            name="sortBy"
                            value={filters.sortBy}
                            onChange={handleSortByChange}
                            className='ms-filter-select'
                        >
                            {sortOptionsDisplay.map(option => (
                                <option key={option.value} value={option.value}>{t(`search-page.sort-options.${option.label.toLowerCase().replace(/[^a-z0-9]/g, '-')}`)}</option>
                            ))}
                        </select>
                    </div>
                    <MultiSelect
                        options={availableGenres}
                        selectedValues={filters.genreIds}
                        onChange={handleGenresChange}
                        placeholder={t('search-page.select-genres')}
                    />
                    <button onClick={resetFiltersAndSearch} className="ms-reset-button">
                        {t('search-page.reset-filters')}
                    </button>
                </div>
            )}

            {loading && <CircularLoader />}
            {error && <div className="ms-error-message">{error}</div>}
            {!loading && !error && movies.length === 0 && filters.query && <div className="ms-no-results">No movies found for "{filters.query}".</div>}
            {!loading && !error && movies.length === 0 && !filters.query && <div className="ms-no-results">Please enter a search query or apply filters to find movies.</div>}

            {!loading && movies.length > 0 && (
                <div className="ms-movie-grid">
                    {movies.map((movie) => (
                        <MovieCard2 key={movie.id} movie={movie} />
                    ))}
                </div>
            )}

            {!loading && !error && totalMovies > moviesPerPage && (
                <Pagination />
            )}

            <Footer />
        </div>
    );
};

export default MovieSearchPage; 